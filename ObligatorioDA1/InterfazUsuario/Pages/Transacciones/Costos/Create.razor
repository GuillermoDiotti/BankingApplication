@page "/Transacciones/Costos/Create"
@using Dominio
@using InterfazUsuario.Data
@using Logica
<PageTitle>NuevaTransaccionCosto</PageTitle>
@inject LogicaTipoDeCambio LogicaTipoDeCambio
@inject LogicaTransaccion LogicaTransaccion
@inject LogicaCuenta LogicaCuenta
@inject LogicaCategoria LogicaCategoria
@inject SessionLogic SessionLogic
@inject LogicaEspacio LogicaEspacio


<div class="bg" @onclick="VaciarMensaje">
    <section class="form-container">
        <h3>Nueva Transaccion De Tipo Costo</h3>
        <form @onsubmit="CrearTransaccion">
            <div class="form-group">
                <label for="titulo">Titulo</label>
                <input type="text" class="form-control" id="titulo" @bind="_titulo" required/>
            </div>
            <div class="form-group">
                <label for="fecha">Fecha</label>
                <input type="date" id="fecha" class="form-control" name="fecha" @bind="_fecha" required>
            </div>
            <div class="form-group">
                <label for="monto">Monto</label>
                <input type="number" id="monto" class="form-control" name="monto" step="0.01" inputmode="decimal" @bind="_monto" required>
            </div>
            <div class="form-group">
                <label for="moneda">Moneda</label>
                <select id="moneda" class="form-control" @bind="_moneda" required>
                    <option value="UYU">UYU</option>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                </select>
            </div>
            <div class="form-group">
                <label for="cuenta">Seleccione una cuenta</label>
                <select id="cuenta" name="cuenta" class="form-control" @bind="_nombreCuenta">
                    <option value="">Seleccione una Cuenta</option>
                    @foreach (var unaCuenta in LogicaCuenta.ListarCuentas(_space))
                    {
                        <option value="@unaCuenta.Nombre">@unaCuenta.Nombre</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="tituloCategoria">Seleccione una categoria</label>
                <select id="tituloCategoria" name="tituloCategoria" class="form-control" @bind="_nombreCategoria">
                    <option value="">Seleccione una Categoria</option>
                    @foreach (var unaCategoria in ConseguirCategoriasEgresoDelUsuario())
                    {
                        <option value="@unaCategoria.Nombre">@unaCategoria.Nombre</option>
                    }
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Ingresar</button>

        </form>
        <a href="/Transacciones/Costos/List">Volver al inicio</a>

        @if (!string.IsNullOrEmpty(_successMessage))
        {
            <p class="success-message">
                @_successMessage
            </p>
        }
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <p class="error-message">
                @_errorMessage
            </p>
        }
    </section>
</div>

@code {
    private string _nombreCuenta = "";
    private string _successMessage = "";
    private string _errorMessage = "";
    private string _titulo;
    private double _monto;
    private DateTime _fecha;
    private string _moneda = "UYU";
    private string _nombreCategoria = "";

    private Espacio _space;

    protected override void OnInitialized()
    {
        _fecha = DateTime.Now;
        _space = LogicaEspacio.ObtenerEspacioPorId(SessionLogic.EspacioActivo.Id);
    }

    private List<Categoria> ConseguirCategoriasEgresoDelUsuario()
    {
        var todasLasCategorias = LogicaCategoria.ObtenerCategoriasDeEspacio(_space).ToList();
        var categoriasEgresoYActivas = todasLasCategorias.FindAll(unaCategoria => unaCategoria.Tipo.Equals("Costo") && unaCategoria.Estatus.Equals("Activa"));
        return categoriasEgresoYActivas;
    }

    private void VaciarMensaje()
    {
        _errorMessage = "";
        _successMessage = "";
    }

    private Categoria ConseguirCategoriaPorNombre()
    {
        var unaCategoria = LogicaCategoria.ObtenerCategoriasDeEspacio(_space).Find(categoria => categoria.Nombre == (_nombreCategoria));
        return unaCategoria;
    }

    

    private Cuenta conseguirCuentaPorNombre()
    {
        return LogicaCuenta.ListarCuentas(_space).Find(unaCuenta => unaCuenta.Nombre.Equals(_nombreCuenta));
    }

    private void MostrarMensajeError(string mensaje)
    {
        _errorMessage = mensaje;
    }

    private void MostrarMensajeExito(string mensaje)
    {
        _successMessage = mensaje;
    }


    private void CrearTransaccion()
    {
        string tipo = "c";
        double saldoActual;
        Categoria categoria = ConseguirCategoriaPorNombre();
        Cuenta cuenta = conseguirCuentaPorNombre();
        try
        {
            LogicaTransaccion.ValidarInputs(categoria, cuenta,_monto );
            if (cuenta.GetType() == typeof(TarjetaCredito))
            {
                tipo = "t";
                saldoActual = LogicaCuenta.CalcularSaldoDisponibleTarjeta(LogicaTipoDeCambio, _space, (TarjetaCredito)cuenta, LogicaTransaccion);
                double valorDeMonedaElegidaEnUYUs = LogicaTipoDeCambio.PasarAPesosUruguayos(_space, _moneda, _monto, _fecha);
                double saldoDeMiCuentaEnUYU = LogicaTipoDeCambio.PasarAPesosUruguayos(_space, cuenta.Moneda, saldoActual, _fecha);
                if (saldoDeMiCuentaEnUYU < valorDeMonedaElegidaEnUYUs )
                {
                    throw new LogicException("ERROR: No tiene saldo suficiente, el saldo de su cuenta es:" + saldoActual+cuenta.Moneda);
                }
            }
            else
            {
                saldoActual = LogicaCuenta.CalcularSaldoDisponibleCuentasMonetarias(LogicaTipoDeCambio, _space, (CuentaMonetaria)cuenta, LogicaTransaccion);
                double valorEnMonedaElegida = LogicaTipoDeCambio.PasarAPesosUruguayos(_space, _moneda, _monto, _fecha);
                double MonedaDeMiCuentaEnUYU = LogicaTipoDeCambio.PasarAPesosUruguayos(_space, cuenta.Moneda, saldoActual, _fecha);
                if (MonedaDeMiCuentaEnUYU < valorEnMonedaElegida)
                {
                    throw new LogicException("ERROR: No tiene saldo suficiente, el saldo de su cuenta es:" + saldoActual + cuenta.Moneda);
                }
            }
            
            Transaccion nuevaTransaccion = ConstruirTransaccion(categoria, cuenta);
            LogicaTransaccion.NuevaTransaccion(nuevaTransaccion);
            double nuevoSaldo;
            if (tipo == "c")
            {
                nuevoSaldo = LogicaCuenta.CalcularSaldoDisponibleCuentasMonetarias(LogicaTipoDeCambio, _space, (CuentaMonetaria)cuenta, LogicaTransaccion);
            }
            else
            {
                nuevoSaldo = LogicaCuenta.CalcularSaldoDisponibleTarjeta(LogicaTipoDeCambio, _space, (TarjetaCredito)cuenta, LogicaTransaccion);
            }
            MostrarMensajeExito("Transaccion añadida con exito, ahora el saldo de su cuenta es: " + nuevoSaldo);
            _titulo = "";
            _monto = 0;
        }
        catch (LogicException e)
        {
            MostrarMensajeError(e.Message);
        }
        
    }

    private Transaccion ConstruirTransaccion(Categoria categoria, Cuenta cuenta)
    {
        Transaccion nuevaTransaccion = new Transaccion()
        {
            Categoria = categoria,
            Cuenta = cuenta,
            Monto = _monto,
            Titulo = _titulo,
            Fecha = _fecha,
            Moneda = _moneda,
            TipoTransaccion = "Costo",
            Espacio = _space
        };
        return nuevaTransaccion;
    }

}